// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthsvcClient is the client API for Authsvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthsvcClient interface {
	Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceReply, error)
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenReply, error)
}

type authsvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthsvcClient(cc grpc.ClientConnInterface) AuthsvcClient {
	return &authsvcClient{cc}
}

func (c *authsvcClient) Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceReply, error) {
	out := new(EnforceReply)
	err := c.cc.Invoke(ctx, "/api.Authsvc/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authsvcClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenReply, error) {
	out := new(CreateTokenReply)
	err := c.cc.Invoke(ctx, "/api.Authsvc/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthsvcServer is the server API for Authsvc service.
// All implementations must embed UnimplementedAuthsvcServer
// for forward compatibility
type AuthsvcServer interface {
	Enforce(context.Context, *EnforceRequest) (*EnforceReply, error)
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenReply, error)
	mustEmbedUnimplementedAuthsvcServer()
}

// UnimplementedAuthsvcServer must be embedded to have forward compatible implementations.
type UnimplementedAuthsvcServer struct {
}

func (UnimplementedAuthsvcServer) Enforce(context.Context, *EnforceRequest) (*EnforceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (UnimplementedAuthsvcServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedAuthsvcServer) mustEmbedUnimplementedAuthsvcServer() {}

// UnsafeAuthsvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthsvcServer will
// result in compilation errors.
type UnsafeAuthsvcServer interface {
	mustEmbedUnimplementedAuthsvcServer()
}

func RegisterAuthsvcServer(s grpc.ServiceRegistrar, srv AuthsvcServer) {
	s.RegisterService(&Authsvc_ServiceDesc, srv)
}

func _Authsvc_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthsvcServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Authsvc/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthsvcServer).Enforce(ctx, req.(*EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authsvc_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthsvcServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Authsvc/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthsvcServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authsvc_ServiceDesc is the grpc.ServiceDesc for Authsvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authsvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Authsvc",
	HandlerType: (*AuthsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enforce",
			Handler:    _Authsvc_Enforce_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Authsvc_CreateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/authsvc.proto",
}
